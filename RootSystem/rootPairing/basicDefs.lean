import Mathlib.LinearAlgebra.RootSystem.Defs
import Mathlib.LinearAlgebra.RootSystem.WeylGroup

variable {ι R M N : Type*} [CommRing R] [AddCommGroup M] [Module R M] [AddCommGroup N] [Module R N]
  (P : RootPairing ι R M N) (S : Type*) {i j k : ι}

namespace RootPairing

-- Define an instance of a perfect pairing

instance : Inhabited (PerfectPairing (ZMod 2) (Prod (ZMod 2) (ZMod 2)) (Prod (ZMod 2) (ZMod 2))) := by
  --toLin: (x:Prod (ZMod 2) (ZMod 2)) (y:Prod (ZMod 2) (ZMod 2)) : (x.fst * y.fst) + (x.snd * y.snd)
  have goal: Inhabited (PerfectPairing (ZMod 2) (ZMod 2 × ZMod 2) (ZMod 2 × ZMod 2))
 := by sorry
  exact goal

#check Prod (ZMod 2) (ZMod 2)


instance : Inhabited (RootPairing (Fin 3) (ZMod 2) (Prod (ZMod 2) (ZMod 2)) (Prod (ZMod 2) (ZMod 2))) := by
  sorry


#check ZMod.commRing 2

/--
structure VierergruppeRing where
  x₁ : (ZMod 2)
  x₂ : (ZMod 2)
  instance : Zero VierergruppeRing :=
    ⟨⟨ZMod.zero 2, ZMod.commring.zero 2⟩⟩
  instance : Add VierergruppeRing :=
    ⟨fun a b ↦ ⟨a.x₁ + b.x₁, a.x₂ + b.x₂⟩⟩
  instance : Neg VierergruppeRing :=
    ⟨fun a ↦ ⟨-a.x₁, -a.x₂⟩⟩
--/

lemma reflection_perm_unique {Q : RootPairing ι R M N} {h1 : Q.toPerfectPairing = P.toPerfectPairing} {h2 : Q.root = P.root} {h3 : Q.coroot = P.coroot} :
    Q.reflection_perm = P.reflection_perm := by
  ext i j
  apply P.root.injective
  nth_rewrite 1 [← h2]
  rw [← Q.reflection_perm_root, ← P.reflection_perm_root, h1, h2, h3]


/-- The Weyl group of a root pairing is the subgroup of permutations of ι generated by the reflections `s_i`. -/
def WeylGroup : Subgroup (Equiv.Perm ι) :=
  Subgroup.closure {σ | ∃ i, σ = P.reflection_perm i}


lemma pairing_si_invariant : P.pairing (P.reflection_perm k i) (P.reflection_perm k j) = P.pairing i j := by
  rw [← P.root_coroot_eq_pairing, ← P.root_coroot_eq_pairing]
  rw [← P.reflection_perm_root, ← P.reflection_perm_coroot]
  simp
  have key : P.pairing k j - P.pairing k j * 2 = - P.pairing k j := by ring
  have key2 : P.pairing i k * -P.pairing k j = - P.pairing i k * P.pairing k j := by ring
  have key3 : P.pairing i j - P.pairing k j * P.pairing i k = P.pairing i j + - P.pairing k j * P.pairing i k := by ring
  rw [key,key2,key3]
  simp
  rw [add_assoc,mul_comm]
  simp


-- Prove that the pairing is invariant under the Weyl group
lemma pairing_w_invariant (σ : WeylGroup P) (i j : ι) :
    P.pairing (σ.val i) (σ.val j) = P.pairing i j := by sorry



lemma si_are_reflections1 {i j k : ι} (h : P.reflection_perm i j = k) :
  P.reflection_perm k = P.reflection_perm i * P.reflection_perm j * P.reflection_perm i := sorry

lemma si_are_reflections2 {w : WeylGroup P} {i j : ι} (h : w.val i = j) :
  P.reflection_perm j = w.val * P.reflection_perm i * (w.val.symm)⁻¹ := by sorry


end RootPairing
